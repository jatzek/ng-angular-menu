angular.module("netgenes.ng-angular-menu",["ng"]),angular.module("netgenes.ng-angular-menu").constant("triggeredMenuLinker",function(attributeName,eventToCatch,positionBuilder){return function(menuBuilder,$injector,$compile){return function($scope,$element,$attributes){function addBackdrop(){var backdropElement=angular.element("<menu-backdrop></menu-backdrop>");return $compile(backdropElement)($scope),angular.element(document.body).append(backdropElement),backdropElement}$element.on(eventToCatch,function($event){var menuName,menuObject,menuElement,nScope,backdrop,anchor;$event.preventDefault(),anchor=$attributes.anchor||"left:top",menuName=$scope.$eval($attributes[attributeName]),menuObject=menuBuilder.build(menuName,$scope),menuElement=angular.element("<ng-menu></ng-menu>"),nScope=$scope.$root.$new(),nScope.menu=menuObject,$compile(menuElement)(nScope),backdrop=addBackdrop(),backdrop.append(menuElement),angular.element(document.body).append(backdrop),menuElement.css(positionBuilder($event,menuElement,anchor))})}}}),angular.module("netgenes.ng-angular-menu").directive("contextMenu",function(menuBuilder,$injector,$compile,triggeredMenuLinker){return{restrict:"A",link:triggeredMenuLinker("contextMenu","contextmenu",function($event){var top,left;return top=$event.clientY-24,left=$event.clientX-24,{position:"absolute",top:top+"px",left:left+"px"}})(menuBuilder,$injector,$compile)}}),angular.module("netgenes.ng-angular-menu").directive("popupMenu",function(menuBuilder,$injector,$compile,triggeredMenuLinker){return{restrict:"A",link:triggeredMenuLinker("popupMenu","click",function($event,menuEl,anchor){var target,style,h,v,r,m,rect;return r=/^(left|right):(top|bottom)$/,r.test(anchor)?(m=r.exec(anchor),h=m[1],v=m[2],target=$event.target,rect=target.getBoundingClientRect(),style={position:"fixed"},style[h]=rect.left+"px",style[v]=rect.top+"px",style):Error("anchor value must match "+r.toString())})(menuBuilder,$injector,$compile)}}),angular.module("netgenes.ng-angular-menu").directive("menuBackdrop",function(){return{restrict:"E",replace:!0,template:'<div class="menu-backdrop" ng-click="backdropCtrl.close($event)"></div>',controllerAs:"backdropCtrl",controller:function($scope,$element){this.close=function($event){$event.preventDefault(),$element.remove()}}}}),angular.module("netgenes.ng-angular-menu").directive("inlineMenu",function(menuBuilder,$injector,$compile){return{restrict:"E"}}),angular.module("netgenes.ng-angular-menu").directive("ngMenu",function($timeout){return{replace:!0,restrict:"E",template:'<ul class="ng-menu">   <li ng-class="{ disable : item.disable, submenu: item.menu }" ng-repeat="item in $menu.items track by $index" ng-click="item.onClick($event)">       <div class="icon"></div>       <div class="text">{{ item.text }}</div>       <div class="submenu-mark"><span ng-if="item.menu">&gt;</span></div>       <ng-menu ng-if="item.menu" src="item.menu" />   </li></ul>',scope:{},link:function($scope,$element,$attributes){$scope.$applyAsync(function(){$attributes.src?$scope.$menu=$scope.$eval("$parent."+$attributes.src):$scope.$menu=$scope.$parent.menu,$timeout(function(){}),$scope.$watch("$menu.active",function(n){n===!1&&$element.remove()})})}}}),angular.module("netgenes.ng-angular-menu").provider("menuBuilder",function(){function MenuBuilder($injector){function Item($scope,def,menu,itemSrc){angular.isString(def)&&(def=items[def]),def=Object.assign({},defaultActionHandler,def);var self=this,actionHandler=menu.getActionsHandler(),path=def.path||menu.path,itemSource=itemSrc||null,source=path?$scope.$eval(path):$scope,locals={$scope:$scope,$source:source,$itemSource:itemSource};this.text=angular.isFunction(def.text)?$injector.invoke(def.text,self,locals):def.text,this.disable=angular.isFunction(def.disable)?$injector.invoke(def.disable,self,locals):def.disable,def.menu&&(this.menu=new Menu($scope,getMenuDefinition(def.menu)),console.log(this.menu)),this.onClick=function($event){$event.preventDefault(),self.disable||(angular.isString(def.action)?$injector.invoke(actionHandler,self,Object.assign({$action:def.action},locals)):angular.isFunction(def.action)&&$injector.invoke(def.action,self,locals),$scope.$applyAsync(function(){menu.active=!1}))}}function Menu($scope,def){function _construct(){if(Object.assign(self,defaultMenuDefinition,def),def.items&&def.items.length)self.items=def.items.map(function(def){return new Item($scope,def,self)});else if(def.itemSrc&&def.itemDef){var itemSrc=defaultItemsProvider.get(def.itemSrc);self.items=itemSrc.map(function(src){return new Item($scope,def.itemDef,self,src)})}}var self=this;this.getActionsHandler=function(){return def.actionHandler||defaultActionHandler},_construct()}function getMenuDefinition(menuDefinition){return angular.isObject(menuDefinition)?menuDefinition:angular.isString(menuDefinition)&&menus[menuDefinition]?menus[menuDefinition]:void(angular.isString(menuDefinition)&&!menus[menuDefinition]&&new Error("MenuBuilder Error! Menu `"+name+"` had not registered","menu_builder_error:menu_does_not_exists"))}this.build=function(menuDefinition,$scope){return new Menu($scope,getMenuDefinition(menuDefinition))}}var defaultActionHandler,defaultItemsProvider,self=this,items={},menus={},defaultActionHandlerFactory=function(){return angular.noop},defaultMenuDefinition={path:null,items:[],itemSrc:null,itemDef:null};this.registerMenuDefinition=function(name,definition){if(menus[name])throw new Error("MenuBuilderProvider Error! Menu `"+name+"` already exists.","menu_builder_provider_error:menu_already_exists");return menus[name]=definition,this},this.registerItemDefinition=function(name,definition){if(items[name])throw new Error("MenuBuilderProvider Error! Menu Item `"+name+"` already exists.","menu_builder_provider_error:item_already_exists");return items[name]=definition,this},this.addItems=function(items){return angular.forEach(items,function(item,id){self.registerItemDefinition(id,item)}),this},this.setDefaultActionHandlerFactory=function(actionHandlerFactory){return defaultActionHandlerFactory=actionHandlerFactory,this},this.setDefaultItemsProvider=function(itemsProviderName){return defaultItemsProvider=itemsProviderName,this},this.$get=function($injector){return defaultActionHandler=$injector.invoke(defaultActionHandlerFactory),defaultItemsProvider="undefined"==typeof defaultItemsProvider?$injector:$injector.get(defaultItemsProvider),new MenuBuilder($injector)}});